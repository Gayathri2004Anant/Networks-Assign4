Name: Gayathri Anant
Roll no. 22CS30026
email: gayathrianant05@gmail.com

Assignment 4: Emulating End-to-End Reliable Flow Control over Unreliable Communication Channels

RESULT TABLE

p               | No. of Transmissions  | Avg No. of Transmissions
---------------------------------------------------------------
0.05            | 229                   | 1.097345
0.10            | 269                   | 1.274336
0.15            | 275                   | 1.185841
0.20            | 293                   | 1.371681
0.25            | 362                   | 1.787611
0.30            | 419                   | 1.707965
0.35            |                    | 2.000000
0.40            |                    | 2.079646
0.45            |                    | 2.522124
0.50            | 830                   | 2.893805

STRUCTS USED AND THEIR DESCRIPTION:

packet: - struct that stores the messages in the sender and the receiver buffer
    int free - indicate if the packet contains valid data 
    int seq - sequence number assigned to that packet
    int ack - acknowlwdgement number assigned to the packet
    char data[MSIZE] - stores the message string
    int rwsize - stores the receiver window size that has to be sent to along with the message

swnd:   - the sender window
    int base - The index of the first message that has been sent but not yet ACKed in the sw array
    int currsize - The numeber of messages sent but not ACKed currently
    int swsize - The maximum number of messeges that can be in the sent but not ACKed state
    int sw[W] - A circular array that contains
        seq_no of the message sent but not ACKed in the window [base, base+currsize)
        -1 otherwise
    time_t timer - tracks timeout for the oldest packet in sw
    int lastSent - sequence number of the packet that was sent last
    int lastAcked - ack number of the last ack packet sent

rwnd:   -the receiver window
    int st - start of the sender window
    int end - end 
    int rwsize
    int rw[W] 
    timer_t timer

    Description:
        [st, end] (inclusive) track the window of messages that can arrive and be buffered. 
        rw[i] contains |    seq no of the expected packet to be buffered at that index
                       |    -1 if i not in valid range of free space in buffer